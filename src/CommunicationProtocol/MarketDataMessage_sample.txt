# To Gemini Data Collector
MarketDataRequest {
	sequenceNumber: 1,
	requestID: 1000000000,
	symbols: [ “BTC/USD”, “ETH/USD” ],
	entryTypes: [ MarketDataEntry.Type::BID, MarketDataEntry.Type::OFFER ],
	depth: 0, # full book
	subscriptionType: MarketDataRequest.SubscriptionType::SNAPSHOT_AND_UPDATES
}

# From Gemini Data Collector
MarketDataSnapshot {
	sequenceNumber: 2,
	requestID: 1000000000,
	entriesBySymbols: [
		EntryBySymbol {
			symbol: “BTC/USD”,
			entries: [
				MarketDataEntry { type: MarketDataEntry.Type::BID, position: 3, size: 10000, price: 7000 },
				MarketDataEntry { type: MarketDataEntry.Type::BID, position: 2, size: 1000, price: 8000 },
				MarketDataEntry { type: MarketDataEntry.Type::BID, position: 1, size: 100, price: 9000 },
				MarketDataEntry { type: MarketDataEntry.Type::OFFER, position: 1, size: 100, price: 11000 },
				MarketDataEntry { type: MarketDataEntry.Type::OFFER, position: 2, size: 1000, price: 12000 },
				MarketDataEntry { type: MarketDataEntry.Type::OFFER, position: 3, size: 10000, price: 13000 }
			]
		},
		EntryBySymbol {
			symbol: “ETH/USD”,
			entries: [
				MarketDataEntry { type: MarketDataEntry.Type::BID, position: 3, size: 10000, price: 200 },
				MarketDataEntry { type: MarketDataEntry.Type::BID, position: 2, size: 1000, price: 300 },
				MarketDataEntry { type: MarketDataEntry.Type::BID, position: 1, size: 100, price: 400 },
				MarketDataEntry { type: MarketDataEntry.Type::OFFER, position: 1, size: 100, price: 600 },
				MarketDataEntry { type: MarketDataEntry.Type::OFFER, position: 2, size: 1000, price: 700 },
				MarketDataEntry { type: MarketDataEntry.Type::OFFER, position: 3, size: 10000, price: 800 }
			]
		},
}

# From Gemini Data Collector
MarketDataIncrementalRefresh {
	sequenceNumber: 3,
	requestID: 1000000000,
	updatesBySymbols: [
		UpdatesBySymbol {
			symbol: “BTC/USD”,
			updates: [
				MarketDataUpdate { action: MarketDataUpdate.Action::NEW, MarketDataEntry { type: MarketDataEntry.Type::BID, position: 1, size: 100, price: 10000 } },
				MarketDataUpdate { action: MarketDataUpdate.Action::DELETE, MarketDataEntry { type: MarketDataEntry.Type::OFFER, position: 1 } }
				MarketDataUpdate { action: MarketDataUpdate.Action::CHANGE, MarketDataEntry { type: MarketDataEntry.Type::OFFER, position: 1, size: 100 } }
			]
		}
	]
}